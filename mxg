#!/usr/bin/perl
#
# MXGuardian Command Line Interface
# https://www.mxguardian.net
#
#
use strict;
use warnings FATAL => 'all';
use File::Basename;
use Getopt::Long qw(:config require_order);
use Pod::Usage;

my $verbose = 0;
my $api_endpoint = $ENV{MXG_API_ENDPOINT} || 'https://secure.mxguardian.net/api/v1';
my $api_key = $ENV{MXG_API_KEY};
my %dispatch = (
    'domain-list'     => \&domain_list,
    'domain-add'      => \&domain_add,
    'domain-delete'   => \&domain_delete,
    'user-list'       => \&user_list,
    'user-add'        => \&user_add,
    'user-delete'     => \&user_delete,
    'search-inbound'  => sub {search("inbound")},
    'search-outbound' => sub {search("outbound")},
);

GetOptions(
    'help'       => sub {pod2usage(1)},
    'key=s'      => \$api_key,
    'endpoint=s' => \$api_endpoint,
    'verbose'    => \$verbose
) or pod2usage(2);
my $command = shift;

pod2usage("The following arguments are required: command") unless defined($command);
pod2usage("<api_key> must be specified via --key or the MXG_API_KEY environment variable") unless defined($api_key);

my $client = MXG::API::Client->new(
    $api_endpoint,
    $api_key
);

# Dispatch to command module
if ( defined($dispatch{$command}) ) {
    Getopt::Long::Configure("no_require_order");
    $dispatch{$command}->();
} else {
    pod2usage("Unknown command: $command");
}

#
# End of main program
#

sub search {
    my $mode = shift;
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => [ qw(COMMANDS/search-inbound COMMANDS/search-outbound) ],
            -verbose  => 99
        );
    };

    # Get options
    my $columns = "mail_id,date,author,subject";
    my $page = 1;
    my $pagesize = 100;
    my $filter;
    GetOptions (
        "help"       => sub { $usage->() } ,
        "filter=s"   => \$filter,
        "columns=s"  => \$columns,
        "page=i"     => \$page,
        "pagesize=i" => \$pagesize,
    ) or $usage->();
    my ($target) = @ARGV;

    # Validate options
    $usage->("Domain name or user email address is required") unless defined($target);

    # Build request parameters
    my %params = (
        page     => $page,
        pagesize => $pagesize,
    );
    $params{filter} = $filter if defined($filter);

    # Submit request
    my $response = $client->request(
        path => MXG::Utils->validateEmail($target) ? "users/$target/$mode" : "domains/$target/$mode",
        params => \%params
    );
    print $response->status() if $verbose;

    # Display results
    my @columns = split(',',$columns);
    for my $msg (@{$response->json()}) {
        for (@columns) {
            if ( $_ eq "mail_id" ) {
                printf '%s ',$msg->{mail_id};
            } elsif ( $_ eq "date" ) {
                printf '%s ',$msg->{date};
            } elsif ( $_ eq "author" ) {
                printf '%-40s ',$msg->{author};
            } elsif ( $_ eq "subject" ) {
                printf '%-50s ',$msg->{subject};
            } elsif ( $_ eq "ip" ) {
                printf '%-25s ',$msg->{ip};
            } elsif ( $_ eq "score" ) {
                printf '%7.3f ',$msg->{score};
            }
        }
        print "\n";
    }
}

sub domain_list {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/domain-list",
            -verbose  => 99
        );
    };

    my $filter;
    my $include_aliases = 0;
    GetOptions (
        "help"            => sub { $usage->() },
        "filter=s"        => \$filter,
        "include-aliases" => \$include_aliases,
    ) or $usage->();

    my %params;
    $params{filter} = $filter if defined($filter);

    my $response = $client->request(
        path => "/domains",
        params => \%params
    );
    print $response->status() if $verbose;

    for my $domain (@{$response->json()->{results}}) {
        printf("%s\n",$domain->{domain_name});
        if ( $include_aliases ) {
            for my $alias (@{$domain->{domain_aliases}}) {
                printf("  -> %s\n",$alias);
            }
        }
    }
}

sub domain_add {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/domain-add",
            -verbose  => 99
        );
    };

    GetOptions (
        "help"       => sub {$usage->()},
    ) or $usage->();
    my ($domain_name,$mailserver) = @ARGV;

    $usage->("<domain_name> is required") unless defined($domain_name);
    $usage->("<mail_server> is required") unless defined($mailserver);

    my $response = $client->request(
        method => 'POST',
        path => "/domains",
        data => {
            domain_name       => $domain_name,
            domain_mailserver => $mailserver,
        }
    );
    print $response->status();

}

sub domain_delete {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/domain-delete",
            -verbose  => 99
        );
    };

    GetOptions (
        "help"       => sub { $usage->() },
    ) or $usage->();
    my $domain_name = shift(@ARGV);

    $usage->("<domain_name> is required") unless defined($domain_name);

    my $path = "/domains/$domain_name";
    my $response = $client->request(method => 'DELETE', path => $path );
    print $response->status();

}

sub user_list {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/user-list",
            -verbose  => 99
        );
    };

    my $include_aliases = 0;
    GetOptions (
        "help"       => sub { $usage->() },
        "include-aliases" => \$include_aliases,
    ) or $usage->();
    my $domain = shift(@ARGV);

    $usage->("<domain_name> is required") unless defined($domain);

    my $response = $client->request(
        path => "/domains/$domain/users",
    );
    print $response->status() if $verbose;

    for my $user (@{$response->json()->{results}}) {
        printf("%s\n",$user->{user_email});
        if ( $include_aliases ) {
            for my $alias (@{$user->{user_aliases}}) {
                printf("  -> %s\n",$alias);
            }
        }
    }
}

sub user_add {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/user-add",
            -verbose  => 99
        );
    };

    GetOptions (
        "help"       => sub { $usage->() },
    ) or $usage->();
    my $user_email = shift(@ARGV);

    $usage->("<user_email> is required") unless defined($user_email);
    $usage->("Please specify a valid email address") unless MXG::Utils->validateEmail($user_email);

    my $domain = MXG::Utils->getDomainFromEmail($user_email);

    my $response = $client->request(
        method => 'POST',
        path => "/domains/$domain/users",
        data => {
            user_email => $user_email
        }
    );
    print $response->status();

}

sub user_delete {
    my $usage = sub {
        pod2usage(
            -msg => shift,
            -sections => "COMMANDS/user-delete",
            -verbose  => 99
        );
    };

    GetOptions (
        "help"       => sub { $usage->() },
    ) or $usage->();
    my $user_email = shift(@ARGV);

    $usage->("<user_email> is required") unless defined($user_email);
    $usage->("Please specify a valid email address") unless MXG::Utils->validateEmail($user_email);

    my $response = $client->request(
        method => 'DELETE',
        path   => "/users/$user_email"
    );
    print $response->status();

}

package MXG::Utils;
use strict;
use warnings FATAL => 'all';

sub getDomainFromEmail {
    my ($self,$email) = @_;
    my ($localpart,$domain) = split('@',$email);
    lc($domain);
}

sub validateEmail {
    my ($self,$email) = @_;
    $email =~ /^([a-zA-Z0-9\+\_\=\.\-])+@([a-zA-Z0-9\-])+(\.[a-zA-Z0-9\-]+)+$/;
}

1;

package MXG::API::Client;
use strict;
use warnings FATAL => 'all';
use LWP;
use JSON;

sub new {
    my ($class,$endpoint,$api_key) = @_;
    $endpoint =~ s/\/$//; # remove trailing slash from endpoint
    bless {
        endpoint => $endpoint,
        api_key  => $api_key,
        ua       => LWP::UserAgent->new(
            timeout => 10
        )
    }, $class;
}

sub request {
    my $self = shift;
    my %args = (
        method => 'GET',
        path => '',
        params => {},
        headers => {},
        data => '',
        @_
    );

    $args{path} =~ s/^\///;  # remove leading slash from path
    $args{data} = JSON::to_json($args{data}) if ref($args{data});

    my $uri = URI->new($self->{endpoint}.'/'.$args{path} );
    $uri->query_form($args{params});

    my %headers = %{$args{headers}};

    $headers{Authorization} = 'Bearer '.$self->{api_key};
    $headers{'Content-Type'} = 'application/json';
    $headers{'Accept'} = 'application/json';

    print $args{method}.' '.$uri->as_string,"\n" if $verbose;
    print $args{data},"\n" if $verbose and $args{data};
    my $request = HTTP::Request->new(
        $args{method},
        $uri->as_string,
        HTTP::Headers->new(%headers),
        $args{data}
    );

    #@type MXG::API::Response
    my $response = bless $self->{ua}->request($request), 'MXG::API::Response';
    die $response->status() unless $response->is_success();

    return $response;
}

1;

package MXG::API::Response;
use strict;
use warnings FATAL => 'all';
use JSON;

use parent 'HTTP::Response';

sub json {
    JSON::from_json(shift->content());
}

sub status {
    shift->status_line()."\n";
}


1;

__END__


=head1 NAME

Command Line Interface to MXGuardian

=head1 VERSION

0.1.0

=head1 SYNOPSIS

mxg [options] <command> [command-options] [command-parameters]

To see help text, you can run:

    mxg -h
    mxg <command> -h

Options:

    [-h|--help]
    [-v|--verbose]
    [-k|--key <api_key>]
    [-e|--endpoint <api_endpoint>]

=head1 DESCRIPTION

Commands available:

    domain-list
    domain-add
    domain-delete
    domain-modify
    user-list
    user-add
    user-delete
    user-modify
    search-inbound
    search-outbound

=head1 COMMANDS

=cut

=head2 B<search-inbound>

mxg search-inbound [options] [search phrase]

 Options:
   --domain <value> | --user <value>
   [--columns <value>]
   [--page <value]
   [-pagesize <value>]

 Default column names:
   mail_id,date,author,subject

 Additional column names (may be specified with --columns)
   sender,from,score,ip

=head2 B<search-outbound>

See search-inbound for details

=cut

=head2 domain-list

mxg domain-list [options]

 Options:
   [--include-aliases]

=cut

=head2 domain-add

mxg domain-add <domain_name> <mail_server>

=cut

=head2 domain-delete

mxg domain-delete <domain_name>

=cut

=head2 user-list

mxg user-list [options] <domain_name>

 Options:
   [--include-aliases]

=cut

=head2 user-add

mxg user-add <user_email>

=cut

=head2 user-delete

mxg user-delete <user_email>

=cut


